// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createPrivilege = `-- name: CreatePrivilege :one
INSERT INTO privilege(username, balance)
VALUES ($1, 0)
RETURNING id, username, status, balance
`

func (q *Queries) CreatePrivilege(ctx context.Context, username string) (Privilege, error) {
	row := q.db.QueryRowContext(ctx, createPrivilege, username)
	var i Privilege
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Status,
		&i.Balance,
	)
	return i, err
}

const createPrivilegeHistory = `-- name: CreatePrivilegeHistory :one
INSERT INTO privilege_history(privilege_id, ticket_uid, datetime, balance_diff, operation_type)
VALUES ($1, $2, NOW(), $3, $4)
RETURNING id, privilege_id, ticket_uid, datetime, balance_diff, operation_type
`

type CreatePrivilegeHistoryParams struct {
	PrivilegeID   int32     `json:"privilegeID"`
	TicketUid     uuid.UUID `json:"ticketUid"`
	BalanceDiff   int32     `json:"balanceDiff"`
	OperationType string    `json:"operationType"`
}

func (q *Queries) CreatePrivilegeHistory(ctx context.Context, arg CreatePrivilegeHistoryParams) (PrivilegeHistory, error) {
	row := q.db.QueryRowContext(ctx, createPrivilegeHistory,
		arg.PrivilegeID,
		arg.TicketUid,
		arg.BalanceDiff,
		arg.OperationType,
	)
	var i PrivilegeHistory
	err := row.Scan(
		&i.ID,
		&i.PrivilegeID,
		&i.TicketUid,
		&i.Datetime,
		&i.BalanceDiff,
		&i.OperationType,
	)
	return i, err
}

const deletePrivilegeHistory = `-- name: DeletePrivilegeHistory :exec
DELETE FROM privilege_history
WHERE ticket_uid=$1
`

func (q *Queries) DeletePrivilegeHistory(ctx context.Context, ticketUid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePrivilegeHistory, ticketUid)
	return err
}

const getPrivilege = `-- name: GetPrivilege :one
SELECT id, username, status, balance FROM privilege
WHERE username=$1 LIMIT 1
`

func (q *Queries) GetPrivilege(ctx context.Context, username string) (Privilege, error) {
	row := q.db.QueryRowContext(ctx, getPrivilege, username)
	var i Privilege
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Status,
		&i.Balance,
	)
	return i, err
}

const getPrivilegeById = `-- name: GetPrivilegeById :one
SELECT id, username, status, balance FROM privilege
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetPrivilegeById(ctx context.Context, id int32) (Privilege, error) {
	row := q.db.QueryRowContext(ctx, getPrivilegeById, id)
	var i Privilege
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Status,
		&i.Balance,
	)
	return i, err
}

const getPrivilegeHistory = `-- name: GetPrivilegeHistory :one
SELECT id, privilege_id, ticket_uid, datetime, balance_diff, operation_type FROM privilege_history
WHERE ticket_uid=$1 LIMIT 1
`

func (q *Queries) GetPrivilegeHistory(ctx context.Context, ticketUid uuid.UUID) (PrivilegeHistory, error) {
	row := q.db.QueryRowContext(ctx, getPrivilegeHistory, ticketUid)
	var i PrivilegeHistory
	err := row.Scan(
		&i.ID,
		&i.PrivilegeID,
		&i.TicketUid,
		&i.Datetime,
		&i.BalanceDiff,
		&i.OperationType,
	)
	return i, err
}

const listPrivilegeHistories = `-- name: ListPrivilegeHistories :many
SELECT id, privilege_id, ticket_uid, datetime, balance_diff, operation_type FROM privilege_history
WHERE privilege_id=$1
`

func (q *Queries) ListPrivilegeHistories(ctx context.Context, privilegeID int32) ([]PrivilegeHistory, error) {
	rows, err := q.db.QueryContext(ctx, listPrivilegeHistories, privilegeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PrivilegeHistory
	for rows.Next() {
		var i PrivilegeHistory
		if err := rows.Scan(
			&i.ID,
			&i.PrivilegeID,
			&i.TicketUid,
			&i.Datetime,
			&i.BalanceDiff,
			&i.OperationType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrivilegeBalance = `-- name: UpdatePrivilegeBalance :exec
UPDATE privilege
SET balance=$2
WHERE username=$1
`

type UpdatePrivilegeBalanceParams struct {
	Username string `json:"username"`
	Balance  int32  `json:"balance"`
}

func (q *Queries) UpdatePrivilegeBalance(ctx context.Context, arg UpdatePrivilegeBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updatePrivilegeBalance, arg.Username, arg.Balance)
	return err
}
