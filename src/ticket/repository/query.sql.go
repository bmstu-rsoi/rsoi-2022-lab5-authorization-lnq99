// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO ticket(ticket_uid,username,flight_number,price,status)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, ticket_uid, username, flight_number, price, status
`

type CreateTicketParams struct {
	TicketUid    uuid.UUID `json:"ticketUid"`
	Username     string    `json:"username"`
	FlightNumber string    `json:"flightNumber"`
	Price        int32     `json:"price"`
	Status       string    `json:"status"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicket,
		arg.TicketUid,
		arg.Username,
		arg.FlightNumber,
		arg.Price,
		arg.Status,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.TicketUid,
		&i.Username,
		&i.FlightNumber,
		&i.Price,
		&i.Status,
	)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM ticket
WHERE username=$1 AND ticket_uid=$2
`

type DeleteTicketParams struct {
	Username  string    `json:"username"`
	TicketUid uuid.UUID `json:"ticketUid"`
}

func (q *Queries) DeleteTicket(ctx context.Context, arg DeleteTicketParams) error {
	_, err := q.db.ExecContext(ctx, deleteTicket, arg.Username, arg.TicketUid)
	return err
}

const getTicket = `-- name: GetTicket :one
SELECT id, ticket_uid, username, flight_number, price, status FROM ticket
WHERE username=$1 AND ticket_uid=$2 LIMIT 1
`

type GetTicketParams struct {
	Username  string    `json:"username"`
	TicketUid uuid.UUID `json:"ticketUid"`
}

func (q *Queries) GetTicket(ctx context.Context, arg GetTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicket, arg.Username, arg.TicketUid)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.TicketUid,
		&i.Username,
		&i.FlightNumber,
		&i.Price,
		&i.Status,
	)
	return i, err
}

const listTickets = `-- name: ListTickets :many
SELECT id, ticket_uid, username, flight_number, price, status FROM ticket
WHERE username=$1
`

func (q *Queries) ListTickets(ctx context.Context, username string) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listTickets, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.TicketUid,
			&i.Username,
			&i.FlightNumber,
			&i.Price,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicketStatus = `-- name: UpdateTicketStatus :exec
UPDATE ticket
SET status=$2
WHERE ticket_uid=$1
`

type UpdateTicketStatusParams struct {
	TicketUid uuid.UUID `json:"ticketUid"`
	Status    string    `json:"status"`
}

func (q *Queries) UpdateTicketStatus(ctx context.Context, arg UpdateTicketStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTicketStatus, arg.TicketUid, arg.Status)
	return err
}
