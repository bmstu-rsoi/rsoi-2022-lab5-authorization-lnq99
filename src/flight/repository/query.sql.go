// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package repository

import (
	"context"
)

const getAirport = `-- name: GetAirport :one
SELECT id, name, city, country FROM airport
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetAirport(ctx context.Context, id int32) (Airport, error) {
	row := q.db.QueryRowContext(ctx, getAirport, id)
	var i Airport
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.Country,
	)
	return i, err
}

const getFlight = `-- name: GetFlight :one
SELECT id, flight_number, datetime, from_airport_id, to_airport_id, price FROM flight
WHERE flight_number=$1 LIMIT 1
`

func (q *Queries) GetFlight(ctx context.Context, flightNumber string) (Flight, error) {
	row := q.db.QueryRowContext(ctx, getFlight, flightNumber)
	var i Flight
	err := row.Scan(
		&i.ID,
		&i.FlightNumber,
		&i.Datetime,
		&i.FromAirportID,
		&i.ToAirportID,
		&i.Price,
	)
	return i, err
}

const listAirports = `-- name: ListAirports :many
SELECT id, name, city, country FROM airport
ORDER BY name
`

func (q *Queries) ListAirports(ctx context.Context) ([]Airport, error) {
	rows, err := q.db.QueryContext(ctx, listAirports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Airport
	for rows.Next() {
		var i Airport
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.City,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlights = `-- name: ListFlights :many
SELECT id, flight_number, datetime, from_airport_id, to_airport_id, price FROM flight
`

func (q *Queries) ListFlights(ctx context.Context) ([]Flight, error) {
	rows, err := q.db.QueryContext(ctx, listFlights)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flight
	for rows.Next() {
		var i Flight
		if err := rows.Scan(
			&i.ID,
			&i.FlightNumber,
			&i.Datetime,
			&i.FromAirportID,
			&i.ToAirportID,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightsWithOffsetLimit = `-- name: ListFlightsWithOffsetLimit :many
SELECT id, flight_number, datetime, from_airport_id, to_airport_id, price FROM flight
LIMIT $1
OFFSET $2
`

type ListFlightsWithOffsetLimitParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFlightsWithOffsetLimit(ctx context.Context, arg ListFlightsWithOffsetLimitParams) ([]Flight, error) {
	rows, err := q.db.QueryContext(ctx, listFlightsWithOffsetLimit, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flight
	for rows.Next() {
		var i Flight
		if err := rows.Scan(
			&i.ID,
			&i.FlightNumber,
			&i.Datetime,
			&i.FromAirportID,
			&i.ToAirportID,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
